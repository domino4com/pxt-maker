steps:
  # 0) Initialize submodules (if any)
  - id: submodule-init
    name: gcr.io/cloud-builders/git
    args: ['submodule', 'update', '--init', '--recursive']

  # 1) Toolchain & npm install (includes libudev for node-usb)
  - id: npm-install
    name: node:20
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          build-essential g++ libudev-dev
        export CXXFLAGS="-std=gnu++17"
        npm install --unsafe-perm --no-audit --fund=false

  # 2) Build with PXT and aggressive prune (whitelist)
  - id: npm-build
    name: node:20
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail

        # Use project build if it exists, otherwise proceed with PXT path
        if npm run | grep -qE ' build( |$)'; then
          npm run build
          exit 0
        fi

        # Make sure 'git pull' inside PXT won't explode in Cloud Build
        git checkout -B master
        git fetch origin master || true
        git branch --set-upstream-to=origin/master master || true

        # TypeScript guard to avoid @types/node lib checking issues
        export PXT_TSARGS="--skipLibCheck"

        # Prepare target (populates libs/* etc.)
        npx -y pxt@latest update

        # --------- HARD PRUNE (whitelist) ----------
        # Keep only the Springbot board and the minimum libs Springbot on ESP32-S2 needs.
        # Adjust the whitelist if Springbot needs additional libs.
        KEEP="
        libs/base
        libs/core
        libs/core---esp32s2
        libs/esp32
        libs/wifi---esp32
        libs/settings
        libs/settings---esp32
        libs/serial
        libs/storage
        libs/pixel
        libs/springbot
        "

        # normalize KEEP list to newline-separated absolute paths
        KEEP_LIST=$(printf "%s\n" $KEEP | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | sed '/^$/d')

        # 2a) Remove all board packages except Springbot / ESP32-S2 ones
        for d in libs/*; do
          if [ -d "$d" ] && [ -f "$d/board.json" ]; then
            case "$d" in
              *springbot*|*esp32s2*) : ;;   # keep Springbot / ESP32-S2 boards
              *) rm -rf "$d" ;;
            esac
          fi
        done

        # 2b) Remove any library folder not explicitly whitelisted
        for d in libs/*; do
          if [ -d "$d" ] && [ ! -f "$d/board.json" ]; then
            # if $d is NOT in KEEP_LIST -> remove it
            if ! printf "%s\n" "$KEEP_LIST" | grep -qx "$d"; then
              rm -rf "$d"
            fi
          fi
        done

        echo "Remaining boards:"
        find libs -maxdepth 1 -type d -exec test -f "{}/board.json" \; -print || true
        echo "Remaining libs:"
        find libs -maxdepth 1 -type d -not -name "*.*" -exec sh -c 'test ! -f "{}/board.json" && echo "{}"' \; || true

        # Build static site (editor + target)
        npx -y pxt@latest staticpkg

  # 3) Deploy (uses your existing npm script)
  - id: firebase-deploy
    name: gcr.io/cloud-builders/npm
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail
        npm run deploy
    env:
      - 'FIREBASE_TOKEN=${_FIREBASE_TOKEN}'
      - 'FIREBASE_PROJECT=springbot-co-za'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8

substitutions:
  _FIREBASE_TOKEN: 'your-firebase-token-here'
