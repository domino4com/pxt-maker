steps:
  # 0) Initialize and update submodules
  - id: submodule-init
    name: gcr.io/cloud-builders/git
    args: ['submodule', 'update', '--init', '--recursive']

  # 1) Install toolchain + udev headers and npm packages
  - id: npm-install
    name: node:20
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          build-essential g++ libudev-dev
        export CXXFLAGS="-std=gnu++17"
        npm install --unsafe-perm --no-audit --fund=false

  # 2) Build/package with PXT (latest); prune non-ESP32 boards AFTER pxt update
  - id: npm-build
    name: node:20
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail

        # If repo provides a build script, use it
        if npm run | grep -qE ' build( |$)'; then
          npm run build
          exit 0
        fi

        # Ensure tracking branch so `git pull` inside PXT works in Cloud Build
        git checkout -B master
        git fetch origin master || true
        git branch --set-upstream-to=origin/master master || true

        # MakeCode/TypeScript guard (prevents @types/node lib errors)
        export PXT_TSARGS="--skipLibCheck"

        # Prepare target (creates libs/* incl. libs/base)
        npx -y pxt@latest update

        # PRUNE: keep only ESP32-S2 / Springbot board packages.
        # IMPORTANT: Only delete dirs that contain a board.json (i.e., board packages).
        for d in libs/*; do
          if [ -d "$d" ] && [ -f "$d/board.json" ]; then
            case "$d" in
              *esp32s2*|*springbot*) : ;;  # keep
              *) rm -rf "$d" ;;
            esac
          fi
        done

        echo "Remaining board packages (post-prune):" || true
        find libs -maxdepth 1 -type d -exec test -f "{}/board.json" \; -print || true

        # Package static site; hex cache will build only for remaining boards
        npx -y pxt@latest staticpkg

  # 3) Deploy to Firebase Hosting
  - id: firebase-deploy
    name: gcr.io/cloud-builders/npm
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail
        npm run deploy
    env:
      - 'FIREBASE_TOKEN=${_FIREBASE_TOKEN}'
      - 'FIREBASE_PROJECT=springbot-co-za'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8

substitutions:
  _FIREBASE_TOKEN: 'your-firebase-token-here'
