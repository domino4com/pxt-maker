timeout: "3600s"

substitutions:
  _FIREBASE_PROJECT: "springbot-co-za"
  _FIREBASE_SITE: "springbot-co-za"
  _REPO_PXT: "https://github.com/domino4com/pxt.git"
  _REPO_PKGS: "https://github.com/domino4com/pxt-common-packages.git"

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: "E2_HIGHCPU_8"

steps:
# 0) Clone PXT core
- name: gcr.io/cloud-builders/git
  id: Clone pxt
  args: ["clone", "$_REPO_PXT", "pxt"]

# 1) Clone common packages
- name: gcr.io/cloud-builders/git
  id: Clone pxt-common-packages
  args: ["clone", "$_REPO_PKGS", "pxt-common-packages"]

# 2) Build PXT core (NO sub-apps)
- name: node:18
  id: Build pxt core (no sub-apps)
  dir: pxt
  entrypoint: bash
  env:
    - CI=true
    - npm_config_fund=false
    - npm_config_audit=false
  args:
    - -lc
    - |
      set -euo pipefail
      rm -f package-lock.json
      npm ci --ignore-scripts
      ./node_modules/.bin/gulp pxtlib pxtcompiler pxtsim pxtpy pxteditor pxtblocks pxtservices pxtrunner cli targetjs reactCommon buildcss webapp browserifyWebapp browserifyAssetEditor semanticjs buildBlocksTestRunner

# 3) Install deps for common packages (no scripts)
- name: node:18
  id: Install pxt-common-packages deps
  dir: pxt-common-packages
  entrypoint: bash
  env:
    - CI=true
    - npm_config_fund=false
    - npm_config_audit=false
  args:
    - -lc
    - |
      set -euo pipefail
      rm -f package-lock.json
      npm ci --ignore-scripts

# 4) Prune to ESP32-S2 only + link PXT repos locally
- name: node:18
  id: Prune & link
  entrypoint: bash
  env:
    - CI=true
    - npm_config_fund=false
    - npm_config_audit=false
  args:
    - -lc
    - |
      set -euo pipefail

      # Prune libs to ESP32-S2
      chmod +x scripts/prune-for-esp32s2.sh
      ./scripts/prune-for-esp32s2.sh

      # Ensure a clean node_modules at repo root
      rm -rf node_modules package-lock.json

      # Link local PXT core + pkgs into this target repo
      npx --yes pxt@0.5.1 link ./pxt
      npx --yes pxt@0.5.1 link ./pxt-common-packages

      # Minimal install for target itself (no postinstall scripts)
      npm ci --ignore-scripts

# 5) Static package to docs/  (NOTE: --output)
- name: node:18
  id: Static pkg
  entrypoint: bash
  env:
    - CI=true
  args:
    - -lc
    - |
      set -euo pipefail
      npx --yes pxt@0.5.1 staticpkg --output docs

# 6) Deploy to Firebase Hosting (default site)
#    We avoid Cloud Build substitutions for tokens (those caused earlier errors).
#    The CLI will use a fresh access token from gcloud.
- name: node:18
  id: Firebase deploy
  entrypoint: bash
  env:
    - CI=true
    - NO_UPDATE_NOTIFIER=true
  args:
    - -lc
    - |
      set -euo pipefail
      npm i -g firebase-tools@13
      # Print versions for traceability
      node -v && npm -v && firebase --version
      # Use an access token produced inside the build (no YAML substitution)
      firebase deploy \
        --project "$_FIREBASE_PROJECT" \
        --only "hosting:${_FIREBASE_SITE}" \
        --non-interactive \
        --token "$(gcloud auth print-access-token)"

artifacts:
  objects:
    location: gs://$_FIREBASE_PROJECT-build-artifacts/pxt-maker/${BUILD_ID}
    paths:
      - docs/**

# Optional cache to speed up rebuilds
# (You can enable a Cloud Build cache in your project settings as well.)
