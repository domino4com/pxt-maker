timeout: "1200s"  # 20 minutes

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8

substitutions:
  _REPO_PXT: https://github.com/domino4com/pxt.git
  _REPO_PKGS: https://github.com/domino4com/pxt-common-packages.git
  _FIREBASE_PROJECT: springbot-co-za
  _FIREBASE_SITE: springbot-co-za

steps:
# 0) Clone PXT
- name: gcr.io/cloud-builders/git
  id: Clone pxt
  entrypoint: bash
  args: ["-lc", "git clone \"$_REPO_PXT\" pxt"]

# 1) Clone common packages
- name: gcr.io/cloud-builders/git
  id: Clone pxt-common-packages
  entrypoint: bash
  args: ["-lc", "git clone \"$_REPO_PKGS\" pxt-common-packages"]

# 2) Prune to ESP32-S2 (this lives in repo root)
- name: node:18
  id: Prune to ESP32-S2
  entrypoint: bash
  args: ["-lc", "chmod +x scripts/prune-for-esp32s2.sh && ./scripts/prune-for-esp32s2.sh"]

# 3) Install deps without running postinstall/prepare hooks (faster, fewer side-effects)
- name: node:18
  id: Install target deps (no scripts)
  entrypoint: bash
  args:
    - -lc
    - |
      npm config set fund false
      npm config set audit false
      npm install --ignore-scripts

# 4) Link local PXT repos (so pxt-cli resolves to our checked-out sources)
- name: node:18
  id: Link local pxt repos
  entrypoint: bash
  args:
    - -lc
    - |
      npx --yes pxt@0.5.1 link ./pxt
      npx --yes pxt@0.5.1 link ./pxt-common-packages
      npm install --ignore-scripts

# 5) Prepare libs for staticpkg: COPY (not symlink) the pruned libs where PXT expects them
- name: node:18
  id: Stage libs
  entrypoint: bash
  args:
    - -lc
    - |
      rm -rf libs
      # copy pruned libs tree from pxt-common-packages into ./libs
      cp -a pxt-common-packages/libs ./libs
      # belt & suspenders: ensure no @types/node lingering that could confuse TS
      rm -rf node_modules/@types/node pxt/node_modules/@types/node pxt-common-packages/node_modules/@types/node || true

# 6) Build the static web package (no hex cache builds since we pruned families/boards)
- name: node:18
  id: Build static package
  entrypoint: bash
  args: ["-lc", "npx --yes pxt@0.5.1 staticpkg"]

# 7) Deploy to Firebase Hosting
- name: gcr.io/cloud-builders/gcloud
  id: Firebase deploy
  entrypoint: bash
  args:
    - -lc
    - |
      curl -sL https://firebase.tools | bash
      firebase deploy --only hosting:$_FIREBASE_SITE --project $_FIREBASE_PROJECT --non-interactive
