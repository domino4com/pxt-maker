# cloudbuild.yaml â€” springbot / ESP32-S2 focused

options:
  logging: CLOUD_LOGGING_ONLY

# No substitutions required beyond your existing Firebase ones, so none declared here.

steps:
  # 0) Clone pxt (core)
  - name: gcr.io/cloud-builders/git
    id: Clone pxt
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail
        git clone https://github.com/domino4com/pxt.git

  # 1) Clone pxt-common-packages
  - name: gcr.io/cloud-builders/git
    id: Clone pxt-common-packages
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail
        git clone https://github.com/domino4com/pxt-common-packages.git

  # 2) Build pxt core (gulp etc.)
  - name: node:18
    id: Build pxt core
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail
        node -v
        npm -v
        cd pxt
        # Fresh install (not npm ci) to avoid lockfile/version drift
        rm -f package-lock.json || true
        npm install
        npm run build

  # 3) Install deps for pxt-common-packages
  - name: node:18
    id: Install pxt-common-packages
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail
        cd pxt-common-packages
        rm -f package-lock.json || true
        npm install

  # 4) Install deps for the target repo (this repo is the Cloud Build source)
  - name: node:18
    id: Install target deps (pxt-maker)
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail
        # We're at /workspace (root of your pxt-maker repo)
        node -v
        npm -v
        rm -f package-lock.json || true
        npm install

  # 5) Prune non-ESP MCUs & connectivity libs (your script)
  - name: node:18
    id: Prune for ESP32-S2 (springbot)
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail
        # Ensure script exists, make it executable, then run it
        test -f scripts/prune-for-esp32s2.sh
        chmod +x scripts/prune-for-esp32s2.sh
        ./scripts/prune-for-esp32s2.sh

  # 6) Link local pxt + pxt-common-packages and build the target site
  - name: node:18
    id: Link & build target
    entrypoint: bash
    args:
      - -lc
      - |
        set -euxo pipefail
        # Stay in repo root (/workspace)
        # Reinstall after pruning in case files changed
        rm -f package-lock.json || true
        npm install

        # Show pxt version (sanity check)
        npx pxt --version

        # Link to local clones
        npx pxt link ./pxt
        npx pxt link ./pxt-common-packages

        # Clean, then produce a static site bundle
        npx pxt clean
        npx pxt staticpkg

artifacts:
  # If your prune/build leaves the site in docs/ or built/ or staticpkg/, update this path.
  # For many PXT targets, staticpkg emits to ./built/packaged
  objects:
    location: gs://$PROJECT_ID-cloudbuild-artifacts/springbot-site
    paths:
      - built/**

# (Optional) timeouts, if you want
timeout: "3600s"
