options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8

substitutions:
  _REPO_PXT: "https://github.com/domino4com/pxt.git"
  _REPO_PKGS: "https://github.com/domino4com/pxt-common-packages.git"
  _FIREBASE_PROJECT: "springbot-co-za"

steps:
# 0) Clone pxt
- name: gcr.io/cloud-builders/git
  id: "Clone pxt"
  entrypoint: bash
  args:
    - -lc
    - |
      git clone ${_REPO_PXT} pxt

# 1) Clone pxt-common-packages
- name: gcr.io/cloud-builders/git
  id: "Clone pxt-common-packages"
  entrypoint: bash
  args:
    - -lc
    - |
      git clone ${_REPO_PKGS} pxt-common-packages

# 2) Build pxt core
- name: node:18
  id: "Build pxt core"
  entrypoint: bash
  args:
    - -lc
    - |
      set -euxo pipefail
      cd pxt
      rm -f package-lock.json
      npm ci || npm install
      npm run build

# 3) Install pxt-common-packages deps
- name: node:18
  id: "Install pxt-common-packages"
  entrypoint: bash
  args:
    - -lc
    - |
      set -euxo pipefail
      cd pxt-common-packages
      rm -f package-lock.json
      npm ci || npm install

# 4) Install target deps (root)
- name: node:18
  id: "Install target deps (pxt-maker)"
  entrypoint: bash
  args:
    - -lc
    - |
      set -euxo pipefail
      rm -f package-lock.json
      npm ci || npm install

# 5) Prune for ESP32-S2 (springbot)
- name: node:18
  id: "Prune for ESP32-S2 (springbot)"
  entrypoint: bash
  args:
    - -lc
    - |
      set -euxo pipefail
      chmod +x scripts/prune-for-esp32s2.sh
      ./scripts/prune-for-esp32s2.sh
      # Link pxt + common packages into node_modules so CLI finds local builds
      npm config set fund false
      npm config set audit false
      npx --yes pxt@0.5.1 link ./pxt
      npx --yes pxt@0.5.1 link ./pxt-common-packages

# 6) Re-install root deps (after links)
- name: node:18
  id: "Link & build target"
  entrypoint: bash
  args:
    - -lc
    - |
      set -euxo pipefail
      rm -rf node_modules package-lock.json
      npm ci || npm install

# 7) Static pkg + Firebase deploy
- name: node:18
  id: "Static pkg + Firebase deploy"
  entrypoint: bash
  args:
    - -lc
    - |
      set -euxo pipefail

      # Build a static package (no unsupported flags)
      npx --yes pxt@0.5.1 staticpkg --noMini

      # Detect public dir
      PUB=""
      for d in docs built/packaged pxt/built/web built/web; do
        if [ -d "$d" ]; then PUB="$d"; break; fi
      done
      if [ -z "$PUB" ]; then
        echo "Could not find staticpkg output. Known dirs not present."
        echo "Tree for debugging:"
        find . -maxdepth 3 -type d | sed 's|^\./||'
        exit 1
      fi
      echo "Using public dir: $PUB"

      # Write firebase config for this build
      cat > firebase.json <<EOF
      {
        "hosting": {
          "public": "$PUB",
          "ignore": ["firebase.json", "**/.*", "**/node_modules/**"]
        }
      }
      EOF

      cat > .firebaserc <<EOF
      {
        "projects": {
          "default": "${_FIREBASE_PROJECT}"
        }
      }
      EOF

      # Install firebase-tools and deploy
      npm i -g firebase-tools
      firebase --project ${_FIREBASE_PROJECT} hosting:sites:list || true
      firebase deploy --only hosting --project ${_FIREBASE_PROJECT} --non-interactive

# (Optional) Artifacts â€“ keep the built static site
artifacts:
  objects:
    location: gs://$PROJECT_ID-build-artifacts/staticpkg/
    paths:
      - "docs/**"
      - "built/packaged/**"
      - "pxt/built/web/**"
      - "built/web/**"
