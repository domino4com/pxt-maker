# cloudbuild.yaml — Springbot (ESP32-S2) MakeCode editor build + deploy (Firebase Hosting)
# Repo assumption: this trigger runs against your pxt-maker repo (root at /workspace)

timeout: "120m"

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8

substitutions:
  _FIREBASE_PROJECT: springbot-co-za
  _FIREBASE_SITE: springbot
  _GITHUB_ORG: domino4com

steps:
  # 0) Clone PXT core and common packages (from Microsoft upstream)
  - name: gcr.io/cloud-builders/git
    id: Clone pxt
    args: ["clone", "--depth=1", "https://github.com/microsoft/pxt.git", "pxt"]

  - name: gcr.io/cloud-builders/git
    id: Clone pxt-common-packages
    args: ["clone", "--depth=1", "https://github.com/microsoft/pxt-common-packages.git", "pxt-common-packages"]

  # 1) Build PXT core
  - name: node:18
    id: Build pxt core
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        export BROWSERSLIST_IGNORE_OLD_DATA=1
        cd pxt
        npm install
        npm run build

  # 2) Install pxt-common-packages (omit dev to avoid @types/node bleed)
  - name: node:18
    id: Install pxt-common-packages
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        export BROWSERSLIST_IGNORE_OLD_DATA=1
        cd pxt-common-packages
        npm install --omit=dev

  # 3) Install target (your pxt-maker in repo root) + system deps for optional native modules
  - name: node:18
    id: Install target deps (pxt-maker)
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        export BROWSERSLIST_IGNORE_OLD_DATA=1
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          build-essential python3 pkg-config libudev-dev
        rm -rf /var/lib/apt/lists/*
        # Install without optional native deps to speed up build
        npm install --no-optional

  # 4) Prune to ESP32-S2 only (allow-list); keep connectivity OFF for v1
  - name: node:18
    id: Prune non-ESP MCUs & noisy libs
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        mkdir -p scripts
        # Create the prune script (if not committed yet)
        cat > scripts/prune-for-esp32s2.sh <<'BASH'
        #!/usr/bin/env bash
        set -euxo pipefail
        ENABLE_CONNECTIVITY="${ENABLE_CONNECTIVITY:-0}"

        # 1) Drop other MCU variants (rp2040/samd/stm32/nrf52)
        pushd pxt-common-packages/libs
        find . -maxdepth 1 -type d \( -name '*---rp2040' -o -name '*---samd' -o -name '*---stm32' -o -name '*---nrf52' \) -print0 | xargs -0 rm -rf || true
        rm -rf core---rp2040 core---samd mixer---samd mixer---stm32 mixer---nrf52 || true

        # 2) Connectivity toggle
        if [ "${ENABLE_CONNECTIVITY}" != "1" ]; then
          rm -rf azureiot mqtt net net-game radio radio-broadcast lora || true
        else
          rm -rf radio radio-broadcast lora || true
        fi
        popd

        # 3) Keep TS clean of Node typings
        rm -rf node_modules/@types/node || true
        rm -rf pxt-common-packages/node_modules/@types/node || true
        rm -rf pxt/node_modules/@types/node || true

        # 4) Remove settings overrides that reference non-ESP DAL constants
        find pxt-common-packages -path '*/settings/targetoverrides.ts' -print0 | xargs -0 rm -f || true

        echo "Prune complete. Remaining libs:"
        ls -1 pxt-common-packages/libs || true
        BASH
        chmod +x scripts/prune-for-esp32s2.sh

        # Run with connectivity OFF for a clean, fast v1
        ENABLE_CONNECTIVITY=0 ./scripts/prune-for-esp32s2.sh

  # 5) Pre-clean and link local pxt + pxt-common-packages into target
  - name: node:18
    id: Link local pxt repos
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        # Remove installed copies so 'pxt link' can create symlinks
        rm -rf node_modules/pxt-core node_modules/pxt_common_packages node_modules/pxt-common-packages || true
        npx pxt link ./pxt
        npx pxt link ./pxt-common-packages

  # 6) Build static package (Springbot target only) → ./site
  - name: node:18
    id: Build static site (Springbot)
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        export BROWSERSLIST_IGNORE_OLD_DATA=1
        export PXT_FORCE=1
        export PXT_NO_UPDATE=1
        npx pxt staticpkg --githubpages --output ./site

  # 7) Write minimal firebase.json to serve ./site
  - name: 'node:18'
    id: Write firebase.json
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        cat > firebase.json <<'JSON'
        {
          "hosting": {
            "site": "springbot",
            "public": "site",
            "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
            "headers": [
              { "source": "**/*.wasm", "headers": [{ "key": "Cross-Origin-Opener-Policy", "value": "same-origin" }] },
              { "source": "**/*.wasm", "headers": [{ "key": "Cross-Origin-Embedder-Policy", "value": "require-corp" }] }
            ]
          }
        }
        JSON

  # 8) Deploy to Firebase Hosting with FIREBASE_TOKEN
  - name: 'node:18'
    id: Deploy to Firebase Hosting
    entrypoint: bash
    secretEnv: ['FIREBASE_TOKEN']
    args:
      - -lc
      - |
        set -euo pipefail
        npx firebase-tools hosting:sites:create "${_FIREBASE_SITE}" --project "${_FIREBASE_PROJECT}" || true
        npx firebase-tools deploy --non-interactive \
          --only hosting \
          --project "${_FIREBASE_PROJECT}" \
          --site "${_FIREBASE_SITE}"

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/FIREBASE_TOKEN/versions/latest
      env: 'FIREBASE_TOKEN'

tags:
  - springbot
  - esp32s2
  - pxt
  - makecode
