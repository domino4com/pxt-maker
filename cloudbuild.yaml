# Cloud Build for springbot-co-za
# Substitutions expected on the trigger:
#   _GITHUB_ORG=domino4com
#   _REPO_PXT=https://github.com/domino4com/pxt.git
#   _REPO_PKGS=https://github.com/domino4com/pxt-common-packages.git
#   _FIREBASE_PROJECT=springbot-co-za
#   _FIREBASE_SITE=springbot-co-za

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8

steps:
# 0) Clone PXT + common packages
- name: gcr.io/cloud-builders/git
  id: Clone pxt
  entrypoint: bash
  args:
    - -lc
    - |
      set -e
      git clone "${_REPO_PXT}" pxt
      git clone "${_REPO_PKGS}" pxt-common-packages

# 1) Build pxt core
- name: node:18
  id: Build pxt core
  entrypoint: bash
  args:
    - -lc
    - |
      set -e
      cd pxt
      rm -f package-lock.json
      npm ci || npm install
      npm run build

# 2) Install pxt-common-packages deps
- name: node:18
  id: Install pxt-common-packages
  entrypoint: bash
  args:
    - -lc
    - |
      set -e
      cd pxt-common-packages
      rm -f package-lock.json
      npm ci || npm install

# 3) Install target deps (root of repo is the target)
- name: node:18
  id: Install target deps (pxt-maker)
  entrypoint: bash
  args:
    - -lc
    - |
      set -e
      rm -f package-lock.json
      npm ci || npm install

# 4) Prune for ESP32-S2 (your script)
- name: node:18
  id: Prune for ESP32-S2 (springbot)
  entrypoint: bash
  args:
    - -lc
    - |
      set -e
      chmod +x scripts/prune-for-esp32s2.sh
      ./scripts/prune-for-esp32s2.sh

# 5) Link & build target (no flags that cause issues)
- name: node:18
  id: Link target
  entrypoint: bash
  args:
    - -lc
    - |
      set -e
      # Make sure we start clean to avoid old node_modules conflicts
      rm -rf node_modules pxt/node_modules pxt-common-packages/node_modules package-lock.json
      npm config set fund false
      npm config set audit false
      npx --yes pxt@0.5.1 link ./pxt
      npx --yes pxt@0.5.1 link ./pxt-common-packages
      npm install

# 6) Static pkg (NO flags; outputs to ./docs)
- name: node:18
  id: Static pkg
  entrypoint: bash
  args:
    - -lc
    - |
      set -e
      npx --yes pxt@0.5.1 staticpkg
      test -d docs && echo "staticpkg produced ./docs" || (echo "ERROR: ./docs was not created" && exit 1)

# 7) Write firebase.json (public=docs, site=springbot-co-za)
- name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
  id: Write firebase.json
  entrypoint: bash
  args:
    - -lc
    - |
      set -e
      cat > firebase.json <<'EOF'
      {
        "hosting": {
          "site": "springbot-co-za",
          "public": "docs",
          "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
          "rewrites": [{ "source": "**", "destination": "/index.html" }]
        }
      }
      EOF
      cat firebase.json

# 8) Deploy to Firebase Hosting (use gcloud access token)
- name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
  id: Firebase deploy
  entrypoint: bash
  args:
    - -lc
    - |
      set -e
      # Install firebase-tools (standalone script)
      curl -sL https://firebase.tools | bash
      ACCESS_TOKEN="$(gcloud auth print-access-token)"
      firebase deploy \
        --only "hosting:${_FIREBASE_SITE}" \
        --project "${_FIREBASE_PROJECT}" \
        --non-interactive \
        --token "${ACCESS_TOKEN}"

artifacts:
  objects:
    location: gs://$_FIREBASE_PROJECT-build-artifacts/$BUILD_ID
    paths:
      - docs/**

timeout: "3600s"
