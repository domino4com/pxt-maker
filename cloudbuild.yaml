timeout: "1200s"

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8
  substitution_option: ALLOW_LOOSE

substitutions:
  _REPO_PXT: https://github.com/domino4com/pxt.git
  _REPO_PKGS: https://github.com/domino4com/pxt-common-packages.git
  _FIREBASE_PROJECT: springbot-co-za
  _FIREBASE_SITE: springbot-co-za
  _USE_FIREBASE_TOKEN: "false"
  _FIREBASE_TOKEN_SECRET: projects/springbot-co-za/secrets/FIREBASE_TOKEN/versions/latest

availableSecrets:
  secretManager:
    - versionName: ${_FIREBASE_TOKEN_SECRET}
      env: FIREBASE_TOKEN

steps:
  # Clone repos
  - name: gcr.io/cloud-builders/git
    id: Clone pxt
    waitFor: ["-"]
    entrypoint: bash
    args: ["-lc", "set -euo pipefail; git clone \"$_REPO_PXT\" pxt"]

  - name: gcr.io/cloud-builders/git
    id: Clone pxt-common-packages
    waitFor: ["-"]
    entrypoint: bash
    args: ["-lc", "set -euo pipefail; git clone \"$_REPO_PKGS\" pxt-common-packages"]

  # Prune to ESP32-S2 only
  - name: node:18
    id: Prune to ESP32-S2
    waitFor: ["Clone pxt", "Clone pxt-common-packages"]
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        chmod +x scripts/prune-for-esp32s2.sh
        ./scripts/prune-for-esp32s2.sh

  # Pin target variants to esp32s2 (no ${...} in Node)
  - name: node:18
    id: Pin target to ESP32-S2 only
    waitFor: ["Prune to ESP32-S2"]
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        node - <<'NODE'
        const fs=require('fs');
        const exists=p=>{try{fs.accessSync(p);return true;}catch{return false;}};
        const list=d=>exists(d)?fs.readdirSync(d).map(x=>d+'/'+x):[];
        const candidates=[]
          .concat(['pxttarget.json','pxt/pxttarget.json'])
          .concat(list('targets').map(x=>'targets/'+x+'/pxttarget.json'))
          .filter(exists);
        if(!candidates.length){ console.log('No pxttarget.json found; skipping variant pin.'); process.exit(0); }
        const p=candidates[0];
        console.log('Pinning variants in '+p+' to ["esp32s2"]');
        const j=JSON.parse(fs.readFileSync(p,'utf8'));
        const only=['esp32s2'];
        function setOnly(o,k){ if(o && Object.prototype.hasOwnProperty.call(o,k)) o[k]=only; }
        setOnly(j,'variants'); setOnly(j,'compileServiceVariants'); setOnly(j,'platforms'); setOnly(j,'hardwareVariants');
        if(j.sim && j.sim.hardwareVariants) j.sim.hardwareVariants=only;
        fs.writeFileSync(p, JSON.stringify(j,null,2));
        NODE

  # Install deps (fall back to npm install) and purge @types/node
  - name: node:18
    id: Install deps (no scripts) + purge node types
    waitFor: ["Pin target to ESP32-S2 only"]
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        npm config set fund false
        npm config set audit false
        npm ci --ignore-scripts || npm install --ignore-scripts
        rm -rf node_modules/@types/node pxt/node_modules/@types/node pxt-common-packages/node_modules/@types/node || true

  # Link libs and ensure base---light exists
  - name: node:18
    id: Stage libs
    waitFor: ["Install deps (no scripts) + purge node types"]
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        rm -rf libs
        ln -s /workspace/pxt-common-packages/libs ./libs
        [ -d libs/base---light ] || cp -a libs/base libs/base---light

  # Shim only ---stm32 transforms to ESP32 variants
  - name: node:18
    id: Shim stm32 transforms
    waitFor: ["Stage libs"]
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail

        shim_dir () {
          dir="$1"
          [ -d "$dir" ] || return 0
          cd "$dir"

          pick_target () {
            nm="$1"
            if   [ -d "$nm---esp32s2" ]; then echo "$nm---esp32s2"
            elif [ -d "$nm---esp32"   ]; then echo "$nm---esp32"
            elif [ -d "$nm"           ]; then echo "$nm"
            else echo ""; fi
          }

          make_link_if_missing () {
            dest="$1"; target="$2"
            [ -z "$target" ] && return 0
            if [ ! -e "$dest" ]; then ln -s "$target" "$dest"; echo "shim: $dest -> $target"; fi
          }

          for lib in core settings screen serial power display; do
            tgt="$(pick_target "$lib")"
            make_link_if_missing "$lib---stm32" "$tgt"
          done

          cd - >/dev/null
        }

        shim_dir "/workspace/pxt-common-packages/libs"
        shim_dir "/workspace/libs"

  # Stub any missing ---vm transforms with minimal pxt.json (neutral no-op)
  - name: node:18
    id: Stub vm transforms
    waitFor: ["Shim stm32 transforms"]
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        make_stub_vm () {
          base="$1"
          [ -d "$base" ] || return 0
          cd "$base"
          for lib in core settings screen serial power display; do
            d="$lib---vm"
            if [ ! -e "$d" ]; then
              mkdir -p "$d"
              cat > "$d/pxt.json" <<'JSON'
{
  "name": "PLACEHOLDER",
  "version": "0.0.0",
  "description": "Auto-stub for VM transform; intentionally empty for ESP32-S2.",
  "files": []
}
JSON
              # replace placeholder with actual name
              sed -i "s/PLACEHOLDER/$d/g" "$d/pxt.json"
              echo "stub: $base/$d"
            fi
          done
          cd - >/dev/null
        }
        make_stub_vm "/workspace/pxt-common-packages/libs"
        make_stub_vm "/workspace/libs"

  # Remove simulator to avoid TS errors; also set PXT_NOSIM via env on the build step
  - name: node:18
    id: Disable sim
    waitFor: ["Stub vm transforms"]
    entrypoint: bash
    args: ["-lc", "set -euo pipefail; rm -rf /workspace/sim || true"]

  # Build static package (no sim)
  - name: node:18
    id: Build static package
    waitFor: ["Disable sim"]
    entrypoint: bash
    env:
      - PXT_NOSIM=1
    args:
      - -lc
      - |
        set -euo pipefail
        echo "Resolved target file(s):"
        ls -1 node_modules/*/pxttarget.json 2>/dev/null || true
        timeout 15m npx --yes pxt@0.5.1 staticpkg

  # Firebase deploy via IAM (default)
  - name: gcr.io/cloud-builders/gcloud
    id: Firebase deploy (IAM)
    waitFor: ["Build static package"]
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        if [ "$_USE_FIREBASE_TOKEN" = "true" ]; then
          echo "Skipping IAM deploy because _USE_FIREBASE_TOKEN=true"
          exit 0
        fi
        curl -sL https://firebase.tools | bash
        firebase deploy --only "hosting:$_FIREBASE_SITE" --project "$_FIREBASE_PROJECT" --non-interactive

  # Firebase deploy via token (optional)
  - name: gcr.io/cloud-builders/gcloud
    id: Firebase deploy (token)
    waitFor: ["Build static package"]
    entrypoint: bash
    secretEnv: ["FIREBASE_TOKEN"]
    args:
      - -lc
      - |
        set -euo pipefail
        if [ "$_USE_FIREBASE_TOKEN" != "true" ]; then
          echo "Skipping token deploy because _USE_FIREBASE_TOKEN!=true"
          exit 0
        fi
        : "$${FIREBASE_TOKEN:?FIREBASE_TOKEN secret not provided}"
        curl -sL https://firebase.tools | bash
        firebase deploy --only "hosting:$_FIREBASE_SITE" --project "$_FIREBASE_PROJECT" --non-interactive --token "$$FIREBASE_TOKEN"
